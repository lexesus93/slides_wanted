import axios from 'axios';
import { config } from '../../config';

export interface PresentationRequest {
  topic: string;
  slideCount: number;
  audience: string;
  style: string;
  language?: string;
  includeImages?: boolean;
  includeSpeakerNotes?: boolean;
  requestField?: string;
  contextField?: string;
  templateFile?: File | null;
  templateId?: string;
}

export interface SlideGenerationRequest {
  slideNumber: number;
  slideTitle: string;
  presentationContext: string;
  requestField?: string;
  contextField?: string;
  layout?: string;
}

export class AIService {
  private baseUrl: string;
  private apiKey: string;
  private provider: string;

  constructor() {
    this.provider = config.ai.defaultProvider;
    
    if (this.provider === 'openrouter') {
      this.baseUrl = 'https://openrouter.ai/api/v1';
      this.apiKey = config.ai.openrouter.apiKey || '';
    } else if (this.provider === 'openai') {
      this.baseUrl = 'https://api.openai.com/v1';
      this.apiKey = config.ai.openai.apiKey || '';
    } else {
      throw new Error(`Unsupported AI provider: ${this.provider}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private createPresentationPrompt(request: PresentationRequest): string {
    let prompt = `–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É: "${request.topic}"

–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: ${request.slideCount}
- –ê—É–¥–∏—Ç–æ—Ä–∏—è: ${request.audience}
- –°—Ç–∏–ª—å: ${request.style}
- –Ø–∑—ã–∫: ${request.language || '—Ä—É—Å—Å–∫–∏–π'}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    if (request.requestField?.trim()) {
      prompt += `

–°–¢–†–£–ö–¢–£–†–ê –ò–õ–ò –ò–î–ï–ò (–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):
${request.requestField.trim()}

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–∞–π–¥–æ–≤. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ª–∞–π–¥–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (request.contextField?.trim()) {
      prompt += `

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
${request.contextField.trim()}

–í–ê–ñ–ù–û: –£—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞.`;
    }

    prompt += `

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
  "slides": [
    {
      "slideNumber": 1,
      "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
      "content": ["–ü—É–Ω–∫—Ç 1", "–ü—É–Ω–∫—Ç 2", "–ü—É–Ω–∫—Ç 3"],
      "layout": "title|content|two-column|image|quote|conclusion",
      "speakerNotes": "–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –≤—ã—Å—Ç—É–ø–∞—é—â–µ–≥–æ"
    }
  ],
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
  "estimatedDuration": —á–∏—Å–ª–æ_–º–∏–Ω—É—Ç
}`;

    return prompt;
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞
   */
  private createSlideContentPrompt(request: SlideGenerationRequest): string {
    let prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:

–°–õ–ê–ô–î ${request.slideNumber}: "${request.slideTitle}"

–ö–û–ù–¢–ï–ö–°–¢ –ü–†–ï–ó–ï–ù–¢–ê–¶–ò–ò:
${request.presentationContext}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –∑–∞–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
    if (request.requestField?.trim()) {
      prompt += `

–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
${request.requestField.trim()}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
    if (request.contextField?.trim()) {
      prompt += `

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
${request.contextField.trim()}`;
    }

    prompt += `

–ú–ê–ö–ï–¢ –°–õ–ê–ô–î–ê: ${request.layout || 'content'}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –°–æ–∑–¥–∞–π —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –£—á–∏—Ç—ã–≤–∞–π –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫—É —Å–ª–∞–π–¥–∞
- –í–∫–ª—é—á–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ JSON –æ–±—ä–µ–∫—Ç:
{
  "slideNumber": ${request.slideNumber},
  "title": "${request.slideTitle}",
  "content": ["–û—Å–Ω–æ–≤–Ω–æ–π –ø—É–Ω–∫—Ç 1", "–û—Å–Ω–æ–≤–Ω–æ–π –ø—É–Ω–∫—Ç 2", "..."],
  "layout": "${request.layout || 'content'}",
  "speakerNotes": "–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –≤—ã—Å—Ç—É–ø–∞—é—â–µ–≥–æ",
  "suggestions": {
    "images": ["–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1", "..."],
    "charts": ["–¢–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –¥–∞–Ω–Ω—ã–µ"],
    "colors": ["#—Ü–≤–µ—Ç1", "#—Ü–≤–µ—Ç2"],
    "fonts": ["–®—Ä–∏—Ñ—Ç1", "–®—Ä–∏—Ñ—Ç2"]
  }
}`;

    return prompt;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ AI API
   */
  private async callAI(prompt: string, maxTokens: number = 2000): Promise<string> {
    try {
      const response = await axios.post(`${this.baseUrl}/chat/completions`, {
        model: this.provider === 'openrouter' ? 'qwen/qwen2.5-vl-32b-instruct:free' : 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –≤ –∑–∞–ø—Ä–æ—Å–µ.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: maxTokens,
        temperature: 0.7
      }, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
          ...(this.provider === 'openrouter' ? {
            'HTTP-Referer': 'http://localhost:3000',
            'X-Title': 'Slides Wanted'
          } : {})
        }
      });

      return response.data.choices[0].message.content;
    } catch (error) {
      console.error('AI API call failed:', error);
      throw new Error('Failed to generate AI content');
    }
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ—á—å –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
   */
  private tryParseJsonFromText(text: string): any {
    if (!text || typeof text !== 'string') return null;

    // 1) –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ —á–∏—Å—Ç—ã–π JSON
    try {
      return JSON.parse(text);
    } catch {}

    // 2) –ü–æ–ø—ã—Ç–∫–∞ –≤—ã—Ç–∞—â–∏—Ç—å JSON –∏–∑ –±–ª–æ–∫–∞ ```json ... ```
    const codeBlockMatch = text.match(/```json[\s\S]*?```/i) || text.match(/```[\s\S]*?```/i);
    if (codeBlockMatch && codeBlockMatch[0]) {
      const inner = codeBlockMatch[0].replace(/```json|```/gi, '').trim();
      try {
        return JSON.parse(inner);
      } catch {}
    }

    // 3) –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∫–æ–±–∫—É –æ–±—ä–µ–∫—Ç–∞
    const firstBrace = text.indexOf('{');
    const lastBrace = text.lastIndexOf('}');
    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      const candidate = text.slice(firstBrace, lastBrace + 1);
      try {
        return JSON.parse(candidate);
      } catch {}
    }

    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–ª–µ–π
   */
  async generatePresentation(request: PresentationRequest): Promise<any> {
    console.log('ü§ñ AI Service: Generating presentation with full context');
    console.log('- Topic:', request.topic);
    console.log('- Has request field:', !!request.requestField?.trim());
    console.log('- Has context field:', !!request.contextField?.trim());

    const prompt = this.createPresentationPrompt(request);
    console.log('üìù Generated prompt preview:', prompt.substring(0, 200) + '...');

    try {
      const aiResponse = await this.callAI(prompt, 3000);
      const parsedResponse = this.tryParseJsonFromText(aiResponse);
      if (!parsedResponse) throw new Error('AI response is not valid JSON');
      
      return {
        ...parsedResponse,
        metadata: {
          hasCustomStructure: !!request.requestField?.trim(),
          hasContextInfo: !!request.contextField?.trim(),
          hasTemplate: !!(request.templateFile || request.templateId),
          templateId: request.templateId,
          generatedAt: new Date().toISOString(),
          aiProvider: this.provider
        }
      };
    } catch (error) {
      console.error('Failed to parse AI response:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return this.generateFallbackPresentation(request);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥–∞
   */
  async generateSlideContent(request: SlideGenerationRequest): Promise<any> {
    console.log('ü§ñ AI Service: Generating slide content with full context');
    console.log('- Slide:', request.slideNumber, request.slideTitle);
    console.log('- Has request field:', !!request.requestField?.trim());
    console.log('- Has context field:', !!request.contextField?.trim());

    const prompt = this.createSlideContentPrompt(request);
    
    try {
      const aiResponse = await this.callAI(prompt, 1500);
      return JSON.parse(aiResponse);
    } catch (error) {
      console.error('Failed to generate slide content:', error);
      return this.generateFallbackSlideContent(request);
    }
  }

  /**
   * Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
   */
  private generateFallbackPresentation(request: PresentationRequest): any {
    const slides = [] as any[];
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ª–∞–π–¥–æ–≤
    let customSlides: any[] = [];
    if (request.requestField?.trim()) {
      const text = request.requestField;
      const lines = text.split('\n');
      // –ì—Ä—É–±–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —Å–µ–∫—Ü–∏–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º Markdown –∏–ª–∏ —è–≤–Ω—ã–º –º–µ—Ç–∫–∞–º —Å–ª–∞–π–¥–æ–≤
      const sections: { title: string; body: string[] }[] = [];
      let current: { title: string; body: string[] } | null = null;
      lines.forEach((raw: string) => {
        const line = raw.trimEnd();
        const h = line.match(/^\s{0,3}(#{1,6})\s+(.*)$/); // # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const slideTag = line.match(/^\s*(–°–ª–∞–π–¥\s*\d+[:.-]?\s*)(.*)$/i);
        if (h) {
          if (current) sections.push(current);
          const heading = typeof h[2] === 'string' ? h[2].trim() : '–°–µ–∫—Ü–∏—è';
          current = { title: heading || '–°–µ–∫—Ü–∏—è', body: [] };
        } else if (slideTag) {
          if (current) sections.push(current);
          const t2 = typeof slideTag[2] === 'string' ? slideTag[2].trim() : '';
          const t1 = typeof slideTag[1] === 'string' ? slideTag[1].trim() : '';
          current = { title: t2 || t1 || '–°–µ–∫—Ü–∏—è', body: [] };
        } else {
          if (!current) current = { title: '–°–µ–∫—Ü–∏—è', body: [] };
          current.body.push(line);
        }
      });
      if (current) sections.push(current);

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–µ–∫—Ü–∏–∏ –≤ —Å–ª–∞–π–¥—ã; –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã (Markdown)
      customSlides = sections.map((sec, index) => {
        const items: string[] = [];
        const tableRows: string[][] = [];
        let inTable = false;
        let headerParsed = false;
        sec.body.forEach((l) => {
          const trimmed = l.trim();
          if (/^\|.*\|$/.test(trimmed)) {
            const cols = trimmed.slice(1, -1).split('|').map(c => c.trim());
            if (!headerParsed) {
              // –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
              tableRows.push(cols);
              headerParsed = true;
              inTable = true;
            } else {
              // —Å—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
              tableRows.push(cols);
            }
            return;
          }
          if (/^\s*[-*+]\s+/.test(trimmed) || /^\s*\d+\.\s+/.test(trimmed)) {
            items.push(l); // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
            return;
          }
          if (trimmed) items.push(trimmed);
        });

        const content = tableRows.length > 0 ? tableRows.map(r => r.join(' | ')) : items;

        return {
          slideNumber: index + 1,
          title: sec.title || `–°–ª–∞–π–¥ ${index + 1}`,
          content,
          layout: tableRows.length > 0 ? 'content' : 'content',
          speakerNotes: `–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–∞ "${sec.title}". ${request.contextField || ''}`
        };
      });
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (customSlides.length > 0) {
      slides.push(...customSlides.slice(0, request.slideCount));
    } else {
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      slides.push(...Array.from({ length: request.slideCount }, (_, i) => ({
        slideNumber: i + 1,
        title: `–°–ª–∞–π–¥ ${i + 1}: ${request.topic}`,
        content: [
          `–ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ ${i + 1}`,
          ...(request.contextField?.trim() ? 
            [`–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${request.contextField.substring(0, 100)}...`] : [])
        ],
        layout: 'content',
        speakerNotes: `–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–∞–π–¥–∞ ${i + 1}. ${request.contextField || ''}`
      })));
    }

    return {
      title: `–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: ${request.topic}`,
      slides,
      summary: `–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –æ ${request.topic}${request.requestField ? ' —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π' : ''}${request.contextField ? ' —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º' : ''}`,
      estimatedDuration: request.slideCount * 2,
      metadata: {
        hasCustomStructure: !!request.requestField?.trim(),
        hasContextInfo: !!request.contextField?.trim(),
        hasTemplate: !!request.templateFile,
        generatedAt: new Date().toISOString(),
        aiProvider: 'fallback'
      }
    };
  }

  /**
   * Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞
   */
  private generateFallbackSlideContent(request: SlideGenerationRequest): any {
    return {
      slideNumber: request.slideNumber,
      title: request.slideTitle,
      content: [
        `–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è "${request.slideTitle}"`,
        ...(request.requestField?.trim() ? 
          [`–£—á–∏—Ç—ã–≤–∞—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${request.requestField.substring(0, 100)}...`] : []),
        ...(request.contextField?.trim() ? 
          [`–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${request.contextField.substring(0, 100)}...`] : [])
      ],
      layout: request.layout || 'content',
      speakerNotes: `–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è "${request.slideTitle}". ${request.presentationContext}. ${request.contextField || ''}`,
      suggestions: {
        images: [],
        charts: [],
        colors: ['#007bff', '#28a745'],
        fonts: ['Arial', 'Helvetica']
      }
    };
  }
}

export const aiService = new AIService();
