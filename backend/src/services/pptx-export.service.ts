import pptxgen from 'pptxgenjs';
import * as fs from 'fs';
import * as path from 'path';

export interface Slide {
  title: string;
  content: string | string[] | any;
  layout?: string;
}

export interface Presentation {
  title: string;
  slides: Slide[];
  createdAt?: string;
}

export class PPTXExportService {
  async generatePPTX(presentation: Presentation): Promise<{ filePath: string; fileName: string }> {
    const pptx = new pptxgen();
    
    // Configure presentation properties
    pptx.author = 'AI Presentation Builder';
    pptx.company = 'Slides Wanted';
    pptx.title = presentation.title;
    pptx.subject = 'AI Generated Presentation';
    
    // Define slide master with consistent styling
    pptx.defineSlideMaster({
      title: 'MASTER_SLIDE',
      background: { color: 'FFFFFF' },
      objects: [
        {
          rect: {
            x: 0,
            y: 0,
            w: '100%',
            h: 0.5,
            fill: { color: '0078D4' }
          }
        },
        {
          text: {
            text: 'AI Presentation Builder',
            options: {
              x: 0.5,
              y: 0.1,
              w: 5,
              h: 0.3,
              color: 'FFFFFF',
              bold: true,
              fontSize: 14
            }
          }
        }
      ]
    });

    // Add title slide
    const titleSlide = pptx.addSlide({ masterName: 'MASTER_SLIDE' });
    titleSlide.addText(presentation.title, {
      x: 1,
      y: 2.5,
      w: 8,
      h: 2,
      fontSize: 32,
      bold: true,
      align: 'center',
      color: '333333'
    });

    titleSlide.addText('Generated by AI Presentation Builder', {
      x: 1,
      y: 4.5,
      w: 8,
      h: 0.5,
      fontSize: 16,
      align: 'center',
      color: '666666'
    });

    // Add content slides
    presentation.slides.forEach((slide, index) => {
      const pptxSlide = pptx.addSlide({ masterName: 'MASTER_SLIDE' });
      this.addSlideContent(pptxSlide, slide, index + 1);
    });

    // Generate file name
    const sanitizedTitle = presentation.title
      .replace(/[^a-zA-Z0-9а-яА-ЯёЁ\s]/gi, '_')
      .substring(0, 50); // Limit filename length
    const fileName = `${sanitizedTitle}_${Date.now()}.pptx`;
    
    // Create exports directory
    const exportsDir = path.join(process.cwd(), 'exports');
    if (!fs.existsSync(exportsDir)) {
      fs.mkdirSync(exportsDir, { recursive: true });
    }
    
    const filePath = path.join(exportsDir, fileName);
    
    // Save to file using promise-based approach
    return new Promise((resolve, reject) => {
      pptx.writeFile({ fileName: filePath })
        .then(() => {
          console.log(`PPTX file generated successfully: ${filePath}`);
          resolve({ filePath, fileName });
        })
        .catch((error) => {
          console.error('PPTX generation failed:', error);
          reject(new Error(`Failed to generate PPTX file: ${error.message}`));
        });
    });
  }

  private addSlideContent(slide: any, content: Slide, slideNumber: number) {
    // Add slide title
    slide.addText(content.title || 'Untitled Slide', {
      x: 0.5,
      y: 1.0,
      w: 9,
      h: 0.8,
      fontSize: 24,
      bold: true,
      color: '333333'
    });

    // Process content - handle different data types
    let contentText: string;
    if (typeof content.content === 'string') {
      contentText = content.content;
    } else if (Array.isArray(content.content)) {
      contentText = content.content.join('\n');
    } else if (content.content && typeof content.content === 'object') {
      contentText = JSON.stringify(content.content, null, 2);
    } else {
      contentText = String(content.content || 'No content');
    }
    const contentLines = contentText.split('\n').filter(line => line.trim());
    
    if (contentLines.length === 1) {
      // Single paragraph
      slide.addText(contentText, {
        x: 0.5,
        y: 2.0,
        w: 9,
        h: 4,
        fontSize: 16,
        color: '444444',
        valign: 'top'
      });
    } else {
      // Multiple lines - create bullet points
      const bulletPoints = contentLines.map(line => ({
        text: line.trim(),
        options: {
          bullet: true,
          fontSize: 16,
          color: '444444'
        }
      }));

      slide.addText(bulletPoints, {
        x: 0.5,
        y: 2.0,
        w: 9,
        h: 4,
        valign: 'top'
      });
    }

    // Add slide number
    slide.addText(`${slideNumber}`, {
      x: 9,
      y: 6.5,
      w: 0.5,
      h: 0.3,
      fontSize: 12,
      align: 'center',
      color: '666666'
    });
  }

  async getFileStats(filePath: string): Promise<{ exists: boolean; size: number }> {
    try {
      const stats = await fs.promises.stat(filePath);
      return { exists: true, size: stats.size };
    } catch (error) {
      return { exists: false, size: 0 };
    }
  }
}

// Export singleton instance
export const pptxExportService = new PPTXExportService();
