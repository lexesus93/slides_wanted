version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.dev
    container_name: slides_backend
    environment:
      NODE_ENV: development
      PORT: 3000
      POSTGRES_URL: postgresql://slides_user:slides_password@postgres:5432/slides_wanted
      REDIS_URL: redis://redis:6379
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "3000:3000"
      - "9229:9229" # Node.js debugger
    volumes:
      - ../backend/src:/app/src
      - ../backend/package.json:/app/package.json
      - ../shared:/app/shared
      - ../backend/exports:/app/exports
      - ../backend/temp:/app/temp
      - ../backend/uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - slides_network
    command: npm run dev

  # Frontend Service
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.dev
    container_name: slides_frontend
    environment:
      NODE_ENV: development
      VITE_API_URL: http://localhost:3000
      VITE_WS_URL: ws://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ../frontend/src:/app/src
      - ../frontend/package.json:/app/package.json
      - ../shared:/app/shared
    depends_on:
      - backend
    networks:
      - slides_network
    command: npm run dev

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: slides_postgres_dev
    environment:
      POSTGRES_DB: slides_wanted
      POSTGRES_USER: slides_user
      POSTGRES_PASSWORD: slides_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U slides_user -d slides_wanted"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - slides_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: slides_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - slides_network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: slides_minio_dev
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_dev_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - slides_network

  # MinIO Setup
  minio_setup:
    image: minio/mc:latest
    container_name: slides_minio_setup_dev
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/slides-wanted;
      /usr/bin/mc mb myminio/templates;
      /usr/bin/mc mb myminio/exports;
      /usr/bin/mc policy set public myminio/slides-wanted;
      exit 0;
      "
    networks:
      - slides_network

volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  minio_dev_data:
    driver: local

networks:
  slides_network:
    driver: bridge
